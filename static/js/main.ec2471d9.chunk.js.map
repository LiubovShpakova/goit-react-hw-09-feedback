{"version":3,"sources":["components/Section/Section.module.css","components/Feedback/feedback.module.css","components/Statistics/Statistics.module.css","components/Notification/Notification.module.css","components/Section/Section.jsx","components/Feedback/feedback.jsx","components/Notification/Notification.jsx","components/Statistics/Statistics.jsx","App.js","index.js"],"names":["module","exports","Section","title","children","className","style","Feedback","options","onLeaveFeedback","buttons","map","option","type","value","onClick","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","ratingColor","list","color","defaultProps","App","useState","setGood","setNeutral","setBad","useEffect","JSON","parse","localStorage","getItem","error","console","log","obj","setItem","stringify","countTotalFeedback","positiveFeedback","parseInt","event","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,MAAQ,yB,gBCA1BD,EAAOC,QAAU,CAAC,QAAU,4B,gBCA5BD,EAAOC,QAAU,CAAC,KAAO,2B,gBCAzBD,EAAOC,QAAU,CAAC,QAAU,gC,+JCebC,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,gCACE,oBAAIC,UAAWC,IAAMH,MAArB,SAA6BA,IAC5BC,M,gBCgBQG,EApBE,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAC3B,OACE,oBAAIJ,UAAWC,IAAMI,QAArB,SACGF,EAAQG,KAAI,SAACC,GACZ,OACE,6BACE,wBAAQC,KAAK,SAASC,MAAOF,EAAQG,QAASN,EAA9C,SACGG,KAFIA,S,gCCEJI,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,oBAAIZ,UAAWC,IAAMW,QAArB,SAA+BA,KCAlCC,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBACzCC,EAAcD,GAAsB,GAAK,QAAU,MACzD,OACE,mCACGD,EAAQ,EACP,qBAAIjB,UAAWC,IAAMmB,KAArB,UACE,wCAAWN,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qBAAIhB,MAAO,CAAEoB,MAAOF,GAApB,gCACsBD,EADtB,UAKF,cAAC,EAAD,CAAcN,QAAQ,yBAM9BC,EAAWS,aAAe,CACxBR,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,mBAAoB,GAUPL,QClCA,SAASU,IAAO,IAAD,EACJC,mBAAS,GADL,mBACrBV,EADqB,KACfW,EADe,OAEED,mBAAS,GAFX,mBAErBT,EAFqB,KAEZW,EAFY,OAGNF,mBAAS,GAHH,mBAGrBR,EAHqB,KAGhBW,EAHgB,KAmB5BC,qBAAU,WACR,IAAK,IAAD,EAC6BC,KAAKC,MAClCC,aAAaC,QAAQ,cADflB,EADN,EACMA,KAAMC,EADZ,EACYA,QAASC,EADrB,EACqBA,IAGvBS,EAAQX,GACRY,EAAWX,GACXY,EAAOX,GACP,MAAOiB,GACPC,QAAQC,IAAIF,MAEb,IACHL,qBAAU,WACR,IAAMQ,EAAM,CAAEtB,OAAMC,UAASC,OAC7Be,aAAaM,QAAQ,YAAaR,KAAKS,UAAUF,MAChD,CAACtB,EAAMC,EAASC,IAEnB,IAAMC,EAAQH,EAAOC,EAAUC,EACzBuB,EAAqB,WACzB,OAAOtB,GAEHuB,EAAmBC,SAAU3B,EAAOyB,IAAwB,KAKlE,OACE,qCACE,cAAC,EAAD,CAASzC,MAAM,wBAAf,SACE,cAAC,EAAD,CACEK,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBA7CgB,SAACsC,GAEvB,OADkBA,EAAMC,OAAhBlC,OAEN,IAAK,OACH,OAAOgB,EAAQX,EAAO,GACxB,IAAK,UACH,OAAOY,EAAWX,EAAU,GAC9B,IAAK,MACH,OAAOY,EAAOX,EAAM,GAEtB,QACE,aAqCF,cAAC,EAAD,CAASlB,MAAM,aAAf,SACE,cAAC,EAAD,CACEgB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOsB,IACPrB,mBAjBCsB,SC3CXI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ec2471d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__CyXkz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"feedback_buttons__1HzIR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__13ioi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__5c-FG\"};","import PropTypes from \"prop-types\";\r\nimport style from \"./Section.module.css\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <div>\r\n      <h1 className={style.title}>{title}</h1>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\nexport default Section;\r\n","import PropTypes from \"prop-types\";\r\nimport style from \"./feedback.module.css\";\r\n\r\nconst Feedback = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <ul className={style.buttons}>\r\n      {options.map((option) => {\r\n        return (\r\n          <li key={option}>\r\n            <button type=\"button\" value={option} onClick={onLeaveFeedback}>\r\n              {option}\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nFeedback.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\nexport default Feedback;\r\n","import PropTypes from \"prop-types\";\r\nimport style from \"./Notification.module.css\";\r\n\r\nconst Notification = ({ message }) => {\r\n  return <h2 className={style.message}>{message}</h2>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\nexport default Notification;\r\n","import PropTypes from \"prop-types\";\r\nimport style from \"./Statistics.module.css\";\r\nimport Notification from \"../Notification/Notification\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  const ratingColor = positivePercentage >= 50 ? \"green\" : \"red\";\r\n  return (\r\n    <>\r\n      {total > 0 ? (\r\n        <ul className={style.list}>\r\n          <li>Good: {good}</li>\r\n          <li>Neutral: {neutral}</li>\r\n          <li>Bad: {bad}</li>\r\n          <li>Total: {total}</li>\r\n          <li style={{ color: ratingColor }}>\r\n            Positive feedback: {positivePercentage}%\r\n          </li>\r\n        </ul>\r\n      ) : (\r\n        <Notification message=\"No feedback given\"></Notification>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nStatistics.defaultProps = {\r\n  good: 0,\r\n  neutral: 0,\r\n  bad: 0,\r\n  total: 0,\r\n  positivePercentage: 0,\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};\r\nexport default Statistics;\r\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Section from \"./components/Section/Section\";\nimport FeedbackOptions from \"./components/Feedback/feedback\";\nimport Statistics from \"./components/Statistics/Statistics\";\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = (event) => {\n    const { value } = event.target;\n    switch (value) {\n      case \"good\":\n        return setGood(good + 1);\n      case \"neutral\":\n        return setNeutral(neutral + 1);\n      case \"bad\":\n        return setBad(bad + 1);\n\n      default:\n        return;\n    }\n  };\n  useEffect(() => {\n    try {\n      const { good, neutral, bad } = JSON.parse(\n        localStorage.getItem(\"statistic\")\n      );\n      setGood(good);\n      setNeutral(neutral);\n      setBad(bad);\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n  useEffect(() => {\n    const obj = { good, neutral, bad };\n    localStorage.setItem(\"statistic\", JSON.stringify(obj));\n  }, [good, neutral, bad]);\n\n  const total = good + neutral + bad;\n  const countTotalFeedback = () => {\n    return total;\n  };\n  const positiveFeedback = parseInt((good / countTotalFeedback()) * 100);\n  const countPositiveFeedbackPercentage = () => {\n    return positiveFeedback;\n  };\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={[\"good\", \"neutral\", \"bad\"]}\n          onLeaveFeedback={onLeaveFeedback}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback()}\n          positivePercentage={countPositiveFeedbackPercentage()}\n        />\n      </Section>\n    </>\n  );\n}\n\n/*class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = (event) => {\n    const value = event.target.value;\n    this.setState((prevState) => ({\n      [value]: prevState[value] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    return parseInt((good / this.countTotalFeedback()) * 100);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={[\"good\", \"neutral\", \"bad\"]}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;*/\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}